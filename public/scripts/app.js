(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var app = {};

app.carousel = function () {
  var elem = document.querySelector('.main-carousel');
  var flkty = new Flickity(elem, {
    contain: true,
    draggable: '>1',
    wrapAround: true
  }); // element argument can be a selector string
  //   for an individual element

  var flkty = new Flickity('.main-carousel', {// options
  });
};

app.events = function () {
  // when a hamburger nav is clicked
  document.querySelector('.menuCircle').addEventListener('click', function (e) {
    var menu = document.querySelector('.menu');

    if (menu.classList.contains('showFlex')) {
      menu.classList.remove('showFlex');
    } else {
      menu.classList.add('showFlex');
    }
  }); // FAQ events

  if (document.querySelector('.questionItem')) {
    var questionItems = document.getElementsByClassName('questionItem'); // loop through the elements with questionItem class

    for (var i = 0; i < questionItems.length; i++) {
      // add event listener to each question item
      questionItems[i].addEventListener('click', function (e) {
        var questionId = this.getAttribute('id'); // unselected previous question

        document.querySelector('.active').classList.remove('active');
        document.querySelector('.show').classList.remove('show'); // select clicked question

        document.getElementById(questionId).classList.add('active');
        document.querySelector(".".concat(questionId)).classList.add('show');
      });
    }
  } // testimonial events


  if (document.querySelector('.testimonialsMain')) {
    var names = document.getElementsByClassName("name"); // add an event listener to all the testimonial names

    for (var _i = 0; _i < names.length; _i++) {
      names[_i].addEventListener('click', function () {
        var clicked = this.getAttribute('class');
        var clickedName = clicked.split(' ')[1]; // unselect previous testimonial

        var previousQuote = document.getElementsByClassName('quote show');
        previousQuote[0].classList.remove('show');
        var previousImage = document.getElementsByClassName('imageContainer show');
        previousImage[0].classList.remove('show');
        document.querySelector('.active').classList.remove('active'); // select clicked testimonial

        document.querySelector(".testimonialNames .".concat(clickedName)).classList.add('active');
        var currentElements = document.getElementsByClassName(clickedName);

        for (var _i2 = 0; _i2 < currentElements.length - 1; _i2++) {
          currentElements[_i2].classList.add('show');
        }
      }); // end of event listener

    } // end of for loop


    var namesNav = document.querySelector('.namesNav');
    namesNav.addEventListener('click', function (e) {
      e.preventDefault();
      console.log('clicked!');
      var namesList = document.querySelector('.testimonialNames ul');

      if (namesList.classList.contains('show')) {
        namesList.classList.remove('show');
      } else {
        namesList.classList.add('show');
      }

      var names = document.getElementsByClassName("name"); // add an event listener to all the testimonial names

      for (var _i3 = 0; _i3 < names.length; _i3++) {
        names[_i3].addEventListener('click', function () {
          console.log('should close now');
          document.querySelector('.testimonialNames ul').classList.remove('show');
        });
      }
    });
  } // end of testimonial events

};

app.init = function () {
  app.events();
  app.carousel();
};

(function () {
  app.init();
})();

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
